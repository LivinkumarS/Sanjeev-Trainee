Website---> the collection of webpages liked together.

webpages ---> HTML, CSS, JS.

HTML---> Hyper Text Markup Language.

Hyper Text(link)--->The text that takes you to another destiny(link)

Markup--->Formatting and structuring.

HTML is used to feed the contents into webpages. then used to structure and format those contents.

first html file should be named as "index"

HTML file extension --> .html

File Path 
________________________

sibiling ---> ./
parent---> ../
child---> /

Tags
_________

sybolic representaion used to structure and format contents inside HTML.

<> opening tag 

// content

</> closing tag.

Types of Tags 
________________________

No void tags---> <> </>
void tags ---> <>


Boiler Plate---> Basic Structure HTML.

html---> head, body

head---> contains metadata(the details about the webpage), links and stylesheet.

body---> Contents that visible to users.

Commenting in HTML
---------------------

<!--  -->


Attributes
-----------

Properties of tag.



Types of Tags.
---------------


Heading Tags---> h1,h2,h3...h6.(to add titles and sub heading)
Paragraph Tag---> p(to seperate the paragraphs)
Unordered List---> list without numbering.(ul--> represents the list, li--->list element)
Ordered List---> list with numbering.(ol--> represents the list, li--->list element).



Anchor Tag.(Links)
________________________

a--->to create links.
attributes--> href(hyper reference)(actual Link), target="_blank"(new tab), draggable.

Image tag 
_________________________

adding images to webpages.

img(void tags) <img>

attributes---> src(link to the image), width(px=0.26mm), alt


Table
________________________


tags --> table, thead---> table head, tbody----> Table body, tr---> table row, th---> table head element, td---> table body data

table attribute---> border.


break and horizontal line
__________________________

br---> breake the current line, creates new line.
hr---> creates horizontal line

Forms
_________

used to collect information(data) from users.

form--> input tags

attributes label--> for---> equal to id attribute in the equivalent input tag.
------------
            input---> name, id, value, type, required

Types of inputs
-------------------

1)text
2)password
3) submit
4)email
5) number
6) date
7) radio
8) checkbox


div---> creates a box, used to wrap content inside it, structuring.


inspect a webpage chrome ofeers  a tool called "developer tool"

ctrl+shift+i----> shortcut.



Website---->frontend and backend.
  
frontend---> html, css, js, react.
backend---> python, django, mongoDB.



CSS---> Cascading Style Sheet.
_________________________________

used to style the elements in HTML.

Syntax:
-----------

selector{
    property: value;
}

Inserting To HTML(3 types)
________________________________

Internal---> head--->style
external---> head--->link, .css
Inline--->  within the element


Types of Selectors
________________________

*<tagname<class<id<Descendant and direct Descendant.

Tagname Selector---> the tagname is used as the selector.

Classname Selector---> .Classname, the Classname can be repeated among multiple tags. A single tag can hold multiple classname.

Id Selector----> #idname. this cannot be repeated.a single tag can hold only one tag name.

Descendant Selector ----> selects all elements inside a specific parent, regardless of how deep they are.

syntax: selector1 selector2{}

Direct Descendat--> Selects all the elements which are the direct child of a specific parent.

syntax selector1>selector2{}

Universal Selector(*)---. Simply selects all the tags.(font-family, remove padding, margin, border, box-sizing)

Multiple Selection--->Selects Multiple elements at once (,)

Pseudo-selector
------------------
it is used to select elements based on its stste, position.

Psudo-class(:) based on the elements state.
1) hover--> the element will get selected when hover over it.
2)focus--> when the input tag is focused
3)first-child---> used to select only the first child
4) last-child---> used to select the last child
5)nth-child()---> used to select the child according to the position(odd,even)

psudo-elements(::) used to select specific part.
1) first-letter---> used to select only the first letter
2) first-line---> used to select only the first line
3)before---> used to add and select content at the begenning of an element
4)after---> used to add and select content at the end of an element

CSS Properties 
________________________

Color Properties 
----------------------

background-color---> used to change the bg color to an element.
color---> used to change the text color.

defining color---> name of the color, hex code. #4585f6, RGB-rgb(num1,num2,num3). 0-255.


Text Properties 
-----------------
font-size---> we can  control the size of the text.(keywords, numeric values)
font-weight--> used to control the thickness.(keywords, numeric values)
font-style
font-family
text-align---> start, center, end, justify



Box Modelling
________________________

it refers to how elements are structured and sized on webpage.
every HTML element is considered as a rectangularbox.

the box model consists of four main parts:
-------------------------------------------

bg-col---> content, padding


1) content--> the actual content of the element (eg: text, image, etc...)(width,height) height--->auto

2)padding--> added space around the content inside the border(between main-content and outer-border).

3)Border--> a surrounding edge around padding.

4)margin---> space outside the border( used to seperate the element from other elements.)(auto);


5) Box-sizing----> content-box, border-box

 content-box---> total width---> content width + padding + border
 border-box---> total width----> content width

6) Border-radius---> used to make curvy edges.


CSS Units
________________________
px=0.26mm, cm, inch

Percentage(%)
--------------
defines size relative to the parent.(width, height, padding and margin)
(width--->parents width)
(height--->parents height)
(padding--->parents width)

rem(Relative to Root Font)
---------------------------

root font---> font size of <html> (default: 16px)
1rem---> 100% of root font size.
1.5rem---> 150% of RFS.
0.7--> 70% of RFS

em(Relative to Parents Font Size)
------------------------------------

1em---> 100% of parent's font size.
1.5em---> 150%.


Viewport Width(relative to the sreen's width)(width)
------------------------------------------------------

100vw---> 100% of screen's width
101vw---> 101% of '' '' ''


Viewport Height(relative to the screen's height)(width)
------------------------------------------------------

100vh---> 100% of screen's height
101vh---> 101% of '' '' ''


Positioning
________________________

{
    position: value;
}

these properties control hoow elements are positioned in the webpage.

1)static
2)relative
3)absolute
4)fixed
5)sticky

Static 
---------
the elements appear in document flow (top to bottom).
default position of an element.

Relative 
-----------
the element moves according to its original position.
(top, bottom, right, left). work flow will never affected.

%---> relative to parents

Absolute 
-----------
the element moves relative to the nearest positioned ancestor.
positioned ancestor---> the ancestor which have positioning property(relative, absolute, fixed)

absolute positioning will change the document flow.(the absolute positioned element will get removed from the document flow. other elements will occupy the space)

%---> relative to NPA

Fixed Positioning
-------------------
the element will stays in the same place forever, even the page is scrolled.

the element will be positioned relative to the screen.

it will change document flow

Sticky Positioning 
---------------------
hybrid of relative and fixed.

it acts like relative until it reaches a specified scroll position, then it behaves like fixed.

before reaching scroll position--> no change in document flow.
after reaching---> it will change doc flow and will act as a fixed


Transform Properties 
_________________________

used to apply various transformations to elements.

1) rotate---> used to rotate an element.
    transform: rotate(2deg);
2) translate---> to move the element, translateX(), translateY(),translate(x,y)
3) scale---> to scale the size of the element. scaleX, scaleY, scale. 0,1,2...

0---> 0%
1--->100%
1.2--->120%
2--->200%

Display Properties
________________________

it controls how the element is displayed in the screen.

Block-elements --> will take full available width as default. always starts in new line. assign height and width
ex: div, h1-h6, p...!

Inline-Elements --> it will take as much width as its content.
can not have width and height properties. it will not create new line
ex: span, a.


Properties
--------------

block---> it will change any element into a block level.
inline---> to inline
inline-block---> combination of both. can have width and height. will not start new line.



Flex
_________

used to align the items in a container.

flex direction-Row---> Row Axis will be main axis, column axis will be cross axis
flex direction-Column---> Column Axis will be main axis, row axis will be cross axis

display:flex;
flex-direction: row, column; (row)
align-items:center, start, end, stretch;(stretch) used to align the items through the cross axis.

justify-content:start, end, center, space-between, space-around, space-evenly ; used to align items in main axis.

gap:; seperates the elements


flex-wrap,

child prop:
flex,---> to assign the width ratio to the child.

flex-wrap--->is used to control whether the flex items should wrap onto multiple lines when they exceed the containers width(nowrap)


Grid
________

2-dimensional layout in css that provedies control over rows and colimns.

display:grid;

Creating Template Rows and Columns
------------------------------------

grid-template-columns: px values,  fr  ;  

grid-template-rows:   ;

excess conteiners will occupy the corresponding column. but have only content height

to apply common height for all these excess childern,

grid-auto-rows:;

gap-->


to specify column and row for a grid child 
--------------------------------------------

grid-column: start/end ;
grid-row: start/end ;
grid-area: rs/cs/re/ce;


Named Layout 
---------------

grid-template-areas:  names....;
grid-ared:;


Media Queries
--------------

@media (condition){

}

conditions---> max-width, min-width



JavaScript 
________________________

JavaScript is a scripting language. used to make web pages interactive.
versatile--> capable of doing multiple.

Dynamically Typed Language --> no need to specify the datatype.

React, angular...!

JS---> Runtime(browser(edge, chrome, firefox))

Syntax (set of rules that the code follows)
____________________________________________

every command should be ended with ";"
// commented out



Attach JS file:
________________________

1) script tag
2) creating JS file



To printing out something
---------------------------
console.log("Hello world")

DataTypes
______________

Number--> ...-1,-2,0,1,2,3...,  1.23234,0.8788.
String--> "", '', ``. su=ingle char or collection of char.
Boolean--> true, false
undefined,
null,
Nan,

function,
object,
array

finding type of a variable---> typeOf var


Create Variables
________________________

3 keywords
----------

let--> can be changed(muted)
var--> can be changed(muted)
const--> cannot be changed(muted)


Number 
______________

integer or floating-point numbers.

methods
-----------
1) tofixed()----> Rounds off the integer to particular decimal point
2) parseInt(str)---> converts a string into integer
3) parseFloat(str)---> convert a string into float

String
______________

single or collection of charectors.

1)length--> finds length of a string.
2)toUpperCase()
3)toLowerrCase()

Boolean
______________

true
false.

Boolean()

Truthy and Falsy Values ---> condition---> otherthan boolean values(5435,"")

Truthy values--> numbers otherthan 0, strings(not empty string), array, objects
falsy values---> 0, null, undefined, Nan, ""


Function 
______________

reusable block of code stored in a variable.
invoking---> calling the function. functionName()

Named Functions---> function(key word)
syntax:
------
function func1(){
    //code
}

Expression---> like creating a variable
syntax
-------
const func2= ()=>{
    // code
}

Arrow Function.

this can be created without name. for single used
syntax:
()=>{
    //code
}


Passing Arguements
________________________

inside the braces "()" we can pass values 


Return Functions 
________________________
keyword---> return ( used to stop the function and return some values )


Arrays
______________
used to store multiple values in a single variable.
we can access individual values by their index number

[213,34,23,23,"wdhb",true].

Objects 
______________

this also stores multiple DataTypes. but in a key-value pair.
we can access individual values by their keys
syntax 
---------
{
    key1:value1,
    key2:value2,
    .
    .
    .
}

2 ways to access values using their keys.
-------------------------------------------
1) objName["key"]
2) bbjName.key 


Undefined.
_____________

a variable that has been declaredbut not assigned a value.

let a;

Null 
________
represents an intentional absence.

let a=null;

NaN(Not a Number)
________________________
 invalid numbers.


Operations
______________
 Arithmetic Operation 
 ------------------------

 Addition---> + 
 Subtraction---> -
 Multiplication---> *
 Division----> /
 Mopdulus(reminder)---> %
 Increment---> ++
 Decrement---> --

 Assignment Operator
 -------------------------

 Assign =
 Add +=
 Sub -=
 Mul *=
 Div /=
 Mod %=


 Comparison or Relational Operator
 ---------------------------------

 equal to ==
 not equal to !=
 strict equal to ===
 greater than >
 less than <
 greater than or equal to >=
 less than or equal to <=

 Logical Operators
 ----------------------
 combines two boolean values and result a Boolean value.

 AND--> (&&)--> both the values must be true.
 OR--> (||) --> any one value must be true.
 X-OR---> (^) --> if both are same (false). or else (true)
 NOT--> (!) --> operates with onnly one boolean. (reversing)



 